name: Build and push

on:
  workflow_dispatch:
      inputs:

        version_major:
          description: 'AlmaLinux major version'
          required: true
          default: '9'
          type: choice
          options:
            - 9

        application:
          description: 'Application name'
          required: true
          default: 'pico'
          type: choice
          options:
            - pico
            - nginx
            - apache_lua

env:
  # Latest version
  version_latest: 9

  # Platforms list: linux/amd64, linux/ppc64le, linux/s390x, linux/arm64
  platforms: ${{ contains(inputs.version_major, '10') && 'linux/amd64/v2, linux/amd64, linux/ppc64le, linux/s390x, linux/arm64' || 'linux/amd64, linux/ppc64le, linux/s390x, linux/arm64' }}

  # Registries list:
  registries: 'quay.io/ykohut'

jobs:
  build-test-push:
    name: Deploy ${{ inputs.version_major }} ${{ matrix.image_types }} images
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        # Set image types matrix based on boolean inputs.type_* with true value
        image_types: ${{ fromJSON(format('["{0}"]', inputs.application)) }}

    steps:

      -
        name: Prepare AlmaLinux Minor version number
        run: |
          case ${{ inputs.version_major }} in
            8)
              version_minor=".10" ;;
            9)
              version_minor=".5"  ;;
            10)
              version_minor=".0" ;;
            10-kitten)
              version_minor= ;;
            *)
              echo "Almalinux ${{ inputs.version_major }} is not supported!" && false
          esac
          echo "version_minor=${version_minor}" >> $GITHUB_ENV

      -
        name: Prepare date stamp
        id: date_stamp
        run: |
          # date stamp
          date_stamp=$(date -u '+%Y%m%d')
          echo "date_stamp=${date_stamp}" >> $GITHUB_ENV

      -
        name: Generate list of images to use as base name for tags
        run: |
          # list of registries to push to
          REGISTRIES="${{ env.registries }}"

          IMAGE_NAMES=
          # generate image names in format $REGISTRY/almalinux or $REGISTRY/${{ inputs.version_major }}-${{ matrix.image_types }}
          # image names are used by docker/metadata-action to set 'images'
          for REGISTRY in ${REGISTRIES//,/ }; do
            IMAGE_NAMES="${IMAGE_NAMES} $REGISTRY/${{ inputs.version_major }}-${{ matrix.image_types }}"
          done

          # remove space at the beginning of string
          IMAGE_NAMES=${IMAGE_NAMES# }
          # separate with comma instead of space and export to the action
          echo "IMAGE_NAMES=${IMAGE_NAMES// /,}" >> $GITHUB_ENV

      -
        name: Enable containerd image store on Docker Engine
        run: |
          # JQ file to switch into containerd image store
          cat << EOF > containerd-snapshotter.jq
          .features |= . + { "containerd-snapshotter": true }
          EOF
          sudo sh -c 'jq -n -f containerd-snapshotter.jq > /etc/docker/daemon.json'
          sudo systemctl restart docker
          docker info -f '{{ .DriverStatus }}'

      -
        name: Checkout ${{ github.repository }}, branch 'main'
        uses: actions/checkout@v4

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      -
        name: Login to Quay.io
        if: contains(env.registries, 'quay.io')
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_IO_USERNAME }}
          password: ${{ secrets.QUAY_IO_CLI_PASSWORD }}

      -
        name: Generate tags and prepare metadata to build and push
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base names for tags
          images: ${{ env.IMAGE_NAMES }}

          # list of tags
          tags: |
            type=raw,value=latest,enable=true
            type=raw,value=${{ inputs.version_major }},enable=true
            type=raw,value=${{ inputs.version_major }}${{ env.version_minor }},enable=true
            type=raw,value=${{ inputs.version_major }}${{ env.version_minor }}-${{ env.date_stamp }},enable=true

      -
        name: Generate Dockerfile
        run: |
          # Find files matching the path mask '*/Containerfile.*' (i.e., in subdirectories),
          # sort them based on their filenames,
          # and then create a single space-separated string of their full paths.
          containerfiles_sorted=$(find {${{ inputs.version_major }},${{ matrix.image_types }}} -name Containerfile.\* -type f -printf '%f\t%p\n' 2>/dev/null | \
                                    sort -t$'\t' -k1,1 | \
                                    cut -d$'\t' -f2 | \
                                    paste -sd ' ' -)

          # Generate Dockerfile from the sorted list of '*/Containerfile.*'
          for containerfile in $containerfiles_sorted; do
            cat "$containerfile" >> Dockerfile
          done

          echo "[Debug]"
          cat Dockerfile

      -
        name: Build and push
        id: build-images
        uses: docker/build-push-action@v5
        with:
          provenance: false
          context: .
          platforms: ${{ env.platforms }}
          build-args: |
            VERSION=${{ inputs.version_major }}
          push: true
          load: false
          tags: ${{ steps.meta.outputs.tags }}
